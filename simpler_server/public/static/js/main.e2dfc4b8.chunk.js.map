{"version":3,"sources":["Filters.jsx","utils.js","ListFileItem.jsx","ListFiles.jsx","api.js","App.js","serviceWorker.js","index.js"],"names":["Search","Input","Option","Select","Filters","state","filters","handleChange","value","console","log","sortBy","setState","onSearch","search","toLowerCase","filterData","data","filter","item","name","includes","sort","a","b","isDir","this","props","className","size","placeholder","style","width","onChange","enterButton","allowClear","children","files","Component","sliceBigString","s","length","slice","Text","Typography","Link","ListFileItem","onClickFolder","path","folderClicked","Item","placement","title","onClick","icon","folderOpen","file","type","moment","createdOn","format","ListFiles","goBack","cwd","charAt","substr","lastIndexOf","getData","directory","args","loading","axios","get","params","getAllFiles","then","response","catch","error","message","finally","homeDirectory","pathname","location","header","shape","angleDoubleUp","marginRight","bordered","dataSource","locale","emptyText","renderItem","App","component","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e2dfc4b8.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Input, Select } from 'antd';\nimport './listfiles.css';\nconst { Search } = Input;\nconst { Option } = Select;\n\nclass Filters extends Component {\n  state = {\n    filters: {},\n  };\n\n  handleChange = (value) => {\n    console.log(`selected ${value}`);\n    const { filters } = this.state;\n    filters.sortBy = value;\n    this.setState({ filters: filters });\n  };\n\n  onSearch = (value) => {\n    console.log(value);\n    const { filters } = this.state;\n    filters.search = value.toLowerCase();\n    this.setState({ filters: filters });\n  };\n\n  filterData = (data) => {\n    let { filters = {} } = this.state;\n    if (filters.search) {\n      data = data.filter((item) =>\n        item.name.toLowerCase().includes(filters.search)\n      );\n    }\n\n    if (filters.sortBy) {\n      if (filters.sortBy === 'folders') {\n        data = data.sort((a, b) => {\n          return (b.isDir ? 1 : 0) - (a.isDir ? 1 : 0);\n        });\n      } else if (filters.sortBy === 'files') {\n        data = data.sort((a, b) => {\n          return (!b.isDir ? 1 : 0) - (!a.isDir ? 1 : 0);\n        });\n      } else if (filters.sortBy === 'atoz') {\n        data = data.sort((a, b) => {\n          if (a.name > b.name) {\n            return 1;\n          } else if (a.name < b.name) {\n            return -1;\n          } else return 0;\n        });\n      }\n    }\n    console.log(filters, data);\n    return data;\n  };\n\n  render() {\n    //const { data } = this.props;\n    const data = this.filterData(this.props.data);\n    return (\n      <>\n        <div className='filter-container'>\n          <Select\n            size='large'\n            placeholder='Sort By'\n            style={{ width: 200 }}\n            onChange={this.handleChange}\n          >\n            <Option value='files'>Files First</Option>\n            <Option value='folders'>Folders First</Option>\n            <Option value='atoz'>A to Z</Option>\n          </Select>\n\n          <Search\n            placeholder='Input File or Folder name'\n            enterButton='Search'\n            allowClear\n            size='large'\n            onSearch={this.onSearch}\n          />\n        </div>\n        {this.props.children({\n          files: data,\n        })}\n      </>\n    );\n  }\n}\n\nFilters.propTypes = {\n  data: PropTypes.array,\n};\n\nexport default Filters;\n","export function sliceBigString(s) {\n  return s && s.length > 50 ? `${s.slice(0, 50)} ...` : s;\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { folderOpen, file } from 'react-icons-kit/fa/';\nimport { Icon } from 'react-icons-kit';\nimport { List, Tooltip, Typography } from 'antd';\nimport moment from 'moment';\nimport './listfiles.css';\nimport { sliceBigString } from './utils';\n\nconst { Text, Link } = Typography;\n\nclass ListFileItem extends Component {\n  onClickFolder = ({ path }) => {\n    this.props.folderClicked(path);\n  };\n\n  render() {\n    const { item } = this.props;\n\n    return (\n      <List.Item>\n        <Tooltip placement='topLeft' title={item.path}>\n          <div className='file-item'>\n            {item.isDir ? (\n              <span>\n                {' '}\n                <Link onClick={() => this.onClickFolder(item)}>\n                  <Icon icon={folderOpen} /> {sliceBigString(item.name)}{' '}\n                </Link>\n              </span>\n            ) : (\n              <span>\n                {' '}\n                <Icon icon={file} /> {sliceBigString(item.name)}{' '}\n              </span>\n            )}\n\n            <Text type='secondary'>\n              {moment(item.createdOn).format('YYYY-MM-DD hh:mm')}\n            </Text>\n\n            <Text type='secondary'>{item.size} bytes</Text>\n          </div>\n        </Tooltip>\n      </List.Item>\n    );\n  }\n}\n\nListFileItem.propTypes = {\n  item: PropTypes.object.isRequired,\n  folderClicked: PropTypes.func.isRequired,\n};\n\nexport default ListFileItem;\n","import React, { Component } from 'react';\nimport { getAllFiles } from './api';\nimport { List, message, Typography, Button } from 'antd';\nimport './listfiles.css';\nimport Filters from './Filters';\nimport ListFileItem from './ListFileItem';\nimport { angleDoubleUp } from 'react-icons-kit/fa/angleDoubleUp';\nimport { Icon } from 'react-icons-kit';\n\nconst { Text } = Typography;\n\nclass ListFiles extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: [],\n      loading: true,\n      homeDirectory: '/',\n      cwd: '/',\n    };\n  }\n\n  goBack = () => {\n    let { cwd } = this.state;\n\n    if (cwd.charAt(cwd.length - 1) === '/') {\n      cwd = cwd.substr(0, cwd.length - 1);\n    }\n\n    if (cwd.lastIndexOf('/') !== -1) {\n      cwd = cwd.substr(0, cwd.lastIndexOf('/') + 1);\n      this.getData({ directory: cwd });\n      this.setState({ cwd: cwd });\n    }\n  };\n\n  folderClicked = (path) => {\n    this.setState({ cwd: path });\n    this.getData({ directory: path });\n  };\n\n  componentDidMount() {\n    const {\n      location: { pathname },\n    } = this.props;\n\n    this.getData({ directory: pathname });\n  }\n\n  getData = (args) => {\n    this.setState({ loading: true });\n    getAllFiles(args)\n      .then((response) => {\n        // console.log(response);\n        this.setState({ data: response.data });\n      })\n      .catch((error) => {\n        console.log(error);\n        message.error('Failed to fetch data');\n      })\n      .finally(() => {\n        this.setState({ loading: false });\n      });\n  };\n\n  render() {\n    const { loading, data, cwd } = this.state;\n\n    return (\n      <>\n        <div className='list-container'>\n          <Filters data={data}>\n            {({ files }) => {\n              return (\n                <List\n                  size='small'\n                  header={\n                    <div>\n                      <Button\n                        shape='circle'\n                        onClick={this.goBack}\n                        icon={<Icon icon={angleDoubleUp} />}\n                        style={{ marginRight: '5px' }}\n                      />\n\n                      <Text type='secondary'>Current Directory: {cwd}</Text>\n                    </div>\n                  }\n                  bordered={true}\n                  loading={loading}\n                  dataSource={files}\n                  locale={{ emptyText: 'Directory is empty' }}\n                  renderItem={(item) => (\n                    <ListFileItem\n                      item={item}\n                      folderClicked={this.folderClicked}\n                    />\n                  )}\n                />\n              );\n            }}\n          </Filters>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default ListFiles;\n","import axios from 'axios';\nconst SERVER = 'http://localhost:5002/api';\n\nexport function getAllFiles(args) {\n  return axios.get(`${SERVER}/listfiles`, {\n    params: args,\n  });\n}\n","import ListFiles from './ListFiles';\nimport { Switch, Route, BrowserRouter } from 'react-router-dom';\nimport React, { Component } from 'react';\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <BrowserRouter>\n          <Switch>\n            <Route path='/:directory?' component={ListFiles} />\n          </Switch>\n        </BrowserRouter>\n      </div>\n    );\n  }\n}\n\nApp.propTypes = {};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './antTheme.less';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}